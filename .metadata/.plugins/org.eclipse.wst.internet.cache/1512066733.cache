<?xml version="1.0" encoding="UTF-8"?>

<xs:schema xmlns:mule="http://www.mulesoft.org/schema/mule/core" xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.mulesoft.org/schema/mule/validation" attributeFormDefault="unqualified" elementFormDefault="qualified">
  <xs:import namespace="http://www.w3.org/XML/1998/namespace"></xs:import>
  <xs:import namespace="http://www.springframework.org/schema/beans" schemaLocation="http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"></xs:import>
  <xs:import namespace="http://www.mulesoft.org/schema/mule/core" schemaLocation="http://www.mulesoft.org/schema/mule/core/current/mule.xsd"></xs:import>
  <xs:element xmlns:mule="http://www.mulesoft.org/schema/mule/core" substitutionGroup="mule:abstract-extension" name="config">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="mule:abstractExtensionType">
          <xs:annotation>
            <xs:documentation>Default configuration</xs:documentation>
          </xs:annotation>
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element minOccurs="0" maxOccurs="1" name="exception-factory">
              <xs:complexType>
                <xs:complexContent>
                  <xs:extension xmlns="http://www.mulesoft.org/schema/mule/validation" base="org.mule.extension.validation.internal.ExceptionFactorySource"></xs:extension>
                </xs:complexContent>
              </xs:complexType>
            </xs:element>
            <xs:element minOccurs="0" maxOccurs="1" name="i18n">
              <xs:complexType>
                <xs:complexContent>
                  <xs:extension xmlns="http://www.mulesoft.org/schema/mule/validation" base="org.mule.extension.validation.internal.I18NConfig"></xs:extension>
                </xs:complexContent>
              </xs:complexType>
            </xs:element>
          </xs:choice>
          <xs:attribute type="xs:string" use="required" name="name"></xs:attribute>
          <xs:attribute type="mule:expressionObject" use="optional" name="exceptionFactory"></xs:attribute>
          <xs:attribute type="mule:expressionObject" use="optional" name="i18n"></xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="org.mule.extension.validation.internal.ExceptionFactorySource">
    <xs:complexContent>
      <xs:extension xmlns:mule="http://www.mulesoft.org/schema/mule/core" base="mule:abstractExtensionType">
        <xs:sequence></xs:sequence>
        <xs:attribute type="mule:expressionString" use="optional" name="class"></xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="ref"></xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element xmlns:mule="http://www.mulesoft.org/schema/mule/core" substitutionGroup="mule:abstract-extension" name="exception-factory">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension xmlns="http://www.mulesoft.org/schema/mule/validation" base="org.mule.extension.validation.internal.ExceptionFactorySource">
          <xs:attribute type="xs:string" use="required" name="name"></xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="org.mule.extension.validation.internal.I18NConfig">
    <xs:complexContent>
      <xs:extension xmlns:mule="http://www.mulesoft.org/schema/mule/core" base="mule:abstractExtensionType">
        <xs:sequence></xs:sequence>
        <xs:attribute type="mule:expressionString" use="required" name="bundlePath"></xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="locale"></xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element xmlns:mule="http://www.mulesoft.org/schema/mule/core" substitutionGroup="mule:abstract-extension" name="i18-n-config">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension xmlns="http://www.mulesoft.org/schema/mule/validation" base="org.mule.extension.validation.internal.I18NConfig">
          <xs:attribute type="xs:string" use="required" name="name"></xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  <xs:element xmlns:mule="http://www.mulesoft.org/schema/mule/core" substitutionGroup="mule:abstract-message-processor" abstract="true" name="validator-message-processor"></xs:element>
  <xs:group name="validator-message-processor-group">
    <xs:choice>
      <xs:element xmlns="http://www.mulesoft.org/schema/mule/validation" ref="validator-message-processor"></xs:element>
    </xs:choice>
  </xs:group>
  <xs:element xmlns="http://www.mulesoft.org/schema/mule/validation" type="AllType" substitutionGroup="validator-message-processor" name="all">
    <xs:annotation>
      <xs:documentation>Perform a list of nested validation operations and informs only one link MultipleValidationResult
which summarizes all of the found errors (if any).
&lt;p/&gt;
If code throwsException is code true, then the link ValidationResult
is communicated by throwing a link ValidationException. On the other hand,
if code throwsException is code false, then the link ValidationResult
is set as the message payload.
&lt;p/&gt;
When configured through XML, all the code validations must include
the All the child processors must contain the code validator-message-processor
substitution group.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="AllType">
    <xs:complexContent>
      <xs:extension xmlns:mule="http://www.mulesoft.org/schema/mule/core" base="mule:abstractMessageProcessorType">
        <xs:sequence>
          <xs:element minOccurs="1" name="validations">
            <xs:complexType>
              <xs:annotation>
                <xs:documentation>the nested validation operations</xs:documentation>
              </xs:annotation>
              <xs:group xmlns="http://www.mulesoft.org/schema/mule/validation" minOccurs="1" maxOccurs="unbounded" ref="validator-message-processor-group"></xs:group>
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute type="mule:substitutableName" use="optional" name="config-ref">
          <xs:annotation>
            <xs:documentation>Specify which configuration to use for this invocation.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element xmlns="http://www.mulesoft.org/schema/mule/validation" type="CustomValidatorType" substitutionGroup="validator-message-processor" name="custom-validator"></xs:element>
  <xs:complexType name="CustomValidatorType">
    <xs:complexContent>
      <xs:extension xmlns:mule="http://www.mulesoft.org/schema/mule/core" base="mule:abstractMessageProcessorType">
        <xs:attribute type="mule:substitutableName" use="optional" name="config-ref">
          <xs:annotation>
            <xs:documentation>Specify which configuration to use for this invocation.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="class"></xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="ref"></xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="exceptionClass">
          <xs:annotation>
            <xs:documentation>then the platform will choose a default type</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="message">
          <xs:annotation>
            <xs:documentation>is an expression and evaluate it in case that the validation failed</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element xmlns="http://www.mulesoft.org/schema/mule/validation" type="IsEmailType" substitutionGroup="validator-message-processor" name="is-email">
    <xs:annotation>
      <xs:documentation>Validates that the code email address is valid</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="IsEmailType">
    <xs:complexContent>
      <xs:extension xmlns:mule="http://www.mulesoft.org/schema/mule/core" base="mule:abstractMessageProcessorType">
        <xs:attribute type="mule:substitutableName" use="optional" name="config-ref">
          <xs:annotation>
            <xs:documentation>Specify which configuration to use for this invocation.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="required" name="email">
          <xs:annotation>
            <xs:documentation>an email address</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="exceptionClass">
          <xs:annotation>
            <xs:documentation>then the platform will choose a default type</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="message">
          <xs:annotation>
            <xs:documentation>is an expression and evaluate it in case that the validation failed</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element xmlns="http://www.mulesoft.org/schema/mule/validation" type="IsEmptyType" substitutionGroup="validator-message-processor" name="is-empty">
    <xs:annotation>
      <xs:documentation>Validates that code value is empty. The definition of empty depends on
the type of code value. If it's a link String it will check that it is not blank.
If it's a link Collection, array or link Map it will check that it's not empty. No other types
are supported, an link IllegalArgumentException will be thrown if any other type is supplied</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="IsEmptyType">
    <xs:complexContent>
      <xs:extension xmlns:mule="http://www.mulesoft.org/schema/mule/core" base="mule:abstractMessageProcessorType">
        <xs:attribute type="mule:substitutableName" use="optional" name="config-ref">
          <xs:annotation>
            <xs:documentation>Specify which configuration to use for this invocation.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionObject" use="required" name="value">
          <xs:annotation>
            <xs:documentation>the value to check</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="exceptionClass">
          <xs:annotation>
            <xs:documentation>then the platform will choose a default type</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="message">
          <xs:annotation>
            <xs:documentation>is an expression and evaluate it in case that the validation failed</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element xmlns="http://www.mulesoft.org/schema/mule/validation" type="IsFalseType" substitutionGroup="validator-message-processor" name="is-false">
    <xs:annotation>
      <xs:documentation>Validates that the given code value is code false</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="IsFalseType">
    <xs:complexContent>
      <xs:extension xmlns:mule="http://www.mulesoft.org/schema/mule/core" base="mule:abstractMessageProcessorType">
        <xs:attribute type="mule:substitutableName" use="optional" name="config-ref">
          <xs:annotation>
            <xs:documentation>Specify which configuration to use for this invocation.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionBoolean" use="required" name="expression">
          <xs:annotation>
            <xs:documentation>the boolean to test</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="exceptionClass">
          <xs:annotation>
            <xs:documentation>then the platform will choose a default type</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="message">
          <xs:annotation>
            <xs:documentation>is an expression and evaluate it in case that the validation failed</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element xmlns="http://www.mulesoft.org/schema/mule/validation" type="IsIpType" substitutionGroup="validator-message-processor" name="is-ip">
    <xs:annotation>
      <xs:documentation>Validates that an code ip address represented as a link String is valid</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="IsIpType">
    <xs:complexContent>
      <xs:extension xmlns:mule="http://www.mulesoft.org/schema/mule/core" base="mule:abstractMessageProcessorType">
        <xs:attribute type="mule:substitutableName" use="optional" name="config-ref">
          <xs:annotation>
            <xs:documentation>Specify which configuration to use for this invocation.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="required" name="ip">
          <xs:annotation>
            <xs:documentation>the ip address to validate</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="exceptionClass">
          <xs:annotation>
            <xs:documentation>then the platform will choose a default type</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="message">
          <xs:annotation>
            <xs:documentation>is an expression and evaluate it in case that the validation failed</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element xmlns="http://www.mulesoft.org/schema/mule/validation" type="IsNotEmptyType" substitutionGroup="validator-message-processor" name="is-not-empty">
    <xs:annotation>
      <xs:documentation>Validates that code value is not empty. The definition of empty depends on
the type of code value. If it's a link String it will check that it is not blank.
If it's a link Collection, array or link Map it will check that it's not empty. No other types
are supported, an link IllegalArgumentException will be thrown if any other type is supplied</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="IsNotEmptyType">
    <xs:complexContent>
      <xs:extension xmlns:mule="http://www.mulesoft.org/schema/mule/core" base="mule:abstractMessageProcessorType">
        <xs:attribute type="mule:substitutableName" use="optional" name="config-ref">
          <xs:annotation>
            <xs:documentation>Specify which configuration to use for this invocation.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionObject" use="required" name="value">
          <xs:annotation>
            <xs:documentation>the value to check</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="exceptionClass">
          <xs:annotation>
            <xs:documentation>then the platform will choose a default type</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="message">
          <xs:annotation>
            <xs:documentation>is an expression and evaluate it in case that the validation failed</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element xmlns="http://www.mulesoft.org/schema/mule/validation" type="IsNotNullType" substitutionGroup="validator-message-processor" name="is-not-null">
    <xs:annotation>
      <xs:documentation>Validates that the given code value is not code null nor
an instance of link NullPayload</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="IsNotNullType">
    <xs:complexContent>
      <xs:extension xmlns:mule="http://www.mulesoft.org/schema/mule/core" base="mule:abstractMessageProcessorType">
        <xs:attribute type="mule:substitutableName" use="optional" name="config-ref">
          <xs:annotation>
            <xs:documentation>Specify which configuration to use for this invocation.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionObject" use="required" name="value">
          <xs:annotation>
            <xs:documentation>the value to test</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="exceptionClass">
          <xs:annotation>
            <xs:documentation>then the platform will choose a default type</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="message">
          <xs:annotation>
            <xs:documentation>is an expression and evaluate it in case that the validation failed</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element xmlns="http://www.mulesoft.org/schema/mule/validation" type="IsNullType" substitutionGroup="validator-message-processor" name="is-null">
    <xs:annotation>
      <xs:documentation>Validates that the given code value is code null or
an instance of link NullPayload</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="IsNullType">
    <xs:complexContent>
      <xs:extension xmlns:mule="http://www.mulesoft.org/schema/mule/core" base="mule:abstractMessageProcessorType">
        <xs:attribute type="mule:substitutableName" use="optional" name="config-ref">
          <xs:annotation>
            <xs:documentation>Specify which configuration to use for this invocation.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionObject" use="required" name="value">
          <xs:annotation>
            <xs:documentation>the value to test</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="exceptionClass">
          <xs:annotation>
            <xs:documentation>then the platform will choose a default type</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="message">
          <xs:annotation>
            <xs:documentation>is an expression and evaluate it in case that the validation failed</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element xmlns="http://www.mulesoft.org/schema/mule/validation" type="IsNumberType" substitutionGroup="validator-message-processor" name="is-number">
    <xs:annotation>
      <xs:documentation>Receives a numeric code value as a link String and validates that it can be parsed
per the rules of a code numberType</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="IsNumberType">
    <xs:complexContent>
      <xs:extension xmlns:mule="http://www.mulesoft.org/schema/mule/core" base="mule:abstractMessageProcessorType">
        <xs:attribute type="mule:substitutableName" use="optional" name="config-ref">
          <xs:annotation>
            <xs:documentation>Specify which configuration to use for this invocation.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="required" name="value">
          <xs:annotation>
            <xs:documentation>the value to be tested</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="locale">
          <xs:annotation>
            <xs:documentation>The locale to use for the format. If not provided it defaults to the system {@link Locale}</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="pattern">
          <xs:annotation>
            <xs:documentation>The pattern used to format the value</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="minValue">
          <xs:annotation>
            <xs:documentation>If provided, check that the parsed value is greater or equal than this value</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="maxValue">
          <xs:annotation>
            <xs:documentation>If provided, check that the parsed value is less or equal than this value</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute xmlns="http://www.mulesoft.org/schema/mule/validation" type="org.mule.extension.validation.internal.validator.NumberTypeEnumType" use="required" name="numberType">
          <xs:annotation>
            <xs:documentation>the type of number to test {@code value} against</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="exceptionClass">
          <xs:annotation>
            <xs:documentation>then the platform will choose a default type</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="message">
          <xs:annotation>
            <xs:documentation>is an expression and evaluate it in case that the validation failed</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element xmlns="http://www.mulesoft.org/schema/mule/validation" type="IsTimeType" substitutionGroup="validator-message-processor" name="is-time">
    <xs:annotation>
      <xs:documentation>Validates that a code time in link String format is valid for the given code pattern and code locale.
If no pattern is provided, then the code locale's default will be used</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="IsTimeType">
    <xs:complexContent>
      <xs:extension xmlns:mule="http://www.mulesoft.org/schema/mule/core" base="mule:abstractMessageProcessorType">
        <xs:attribute type="mule:substitutableName" use="optional" name="config-ref">
          <xs:annotation>
            <xs:documentation>Specify which configuration to use for this invocation.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="required" name="time">
          <xs:annotation>
            <xs:documentation>A date in String format</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="locale">
          <xs:annotation>
            <xs:documentation>the locale of the String</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="pattern">
          <xs:annotation>
            <xs:documentation>the pattern for the {@code date}</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="exceptionClass">
          <xs:annotation>
            <xs:documentation>then the platform will choose a default type</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="message">
          <xs:annotation>
            <xs:documentation>is an expression and evaluate it in case that the validation failed</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element xmlns="http://www.mulesoft.org/schema/mule/validation" type="IsTrueType" substitutionGroup="validator-message-processor" name="is-true">
    <xs:annotation>
      <xs:documentation>Validates that the given code value is code true</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="IsTrueType">
    <xs:complexContent>
      <xs:extension xmlns:mule="http://www.mulesoft.org/schema/mule/core" base="mule:abstractMessageProcessorType">
        <xs:attribute type="mule:substitutableName" use="optional" name="config-ref">
          <xs:annotation>
            <xs:documentation>Specify which configuration to use for this invocation.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionBoolean" use="required" name="expression">
          <xs:annotation>
            <xs:documentation>the boolean to test</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="exceptionClass">
          <xs:annotation>
            <xs:documentation>then the platform will choose a default type</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="message">
          <xs:annotation>
            <xs:documentation>is an expression and evaluate it in case that the validation failed</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element xmlns="http://www.mulesoft.org/schema/mule/validation" type="IsUrlType" substitutionGroup="validator-message-processor" name="is-url">
    <xs:annotation>
      <xs:documentation>Validates that code url is a valid one</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="IsUrlType">
    <xs:complexContent>
      <xs:extension xmlns:mule="http://www.mulesoft.org/schema/mule/core" base="mule:abstractMessageProcessorType">
        <xs:attribute type="mule:substitutableName" use="optional" name="config-ref">
          <xs:annotation>
            <xs:documentation>Specify which configuration to use for this invocation.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="required" name="url">
          <xs:annotation>
            <xs:documentation>the URL to validate as a {@link String}</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="exceptionClass">
          <xs:annotation>
            <xs:documentation>then the platform will choose a default type</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="message">
          <xs:annotation>
            <xs:documentation>is an expression and evaluate it in case that the validation failed</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element xmlns="http://www.mulesoft.org/schema/mule/validation" type="MatchesRegexType" substitutionGroup="validator-message-processor" name="matches-regex">
    <xs:annotation>
      <xs:documentation>Validates that code value matches the code regex regular expression</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="MatchesRegexType">
    <xs:complexContent>
      <xs:extension xmlns:mule="http://www.mulesoft.org/schema/mule/core" base="mule:abstractMessageProcessorType">
        <xs:attribute type="mule:substitutableName" use="optional" name="config-ref">
          <xs:annotation>
            <xs:documentation>Specify which configuration to use for this invocation.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="required" name="value">
          <xs:annotation>
            <xs:documentation>the value to check</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="required" name="regex">
          <xs:annotation>
            <xs:documentation>the regular expression to check against</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionBoolean" use="optional" name="caseSensitive">
          <xs:annotation>
            <xs:documentation>when {@code true} matching is case sensitive, otherwise matching is case in-sensitive</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="exceptionClass">
          <xs:annotation>
            <xs:documentation>then the platform will choose a default type</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="message">
          <xs:annotation>
            <xs:documentation>is an expression and evaluate it in case that the validation failed</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:element xmlns="http://www.mulesoft.org/schema/mule/validation" type="ValidateSizeType" substitutionGroup="validator-message-processor" name="validate-size">
    <xs:annotation>
      <xs:documentation>Validates that code value has a size between certain inclusive boundaries. This
validator is capable of handling instances of link String, link Collection,
link Map and arrays</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:complexType name="ValidateSizeType">
    <xs:complexContent>
      <xs:extension xmlns:mule="http://www.mulesoft.org/schema/mule/core" base="mule:abstractMessageProcessorType">
        <xs:attribute type="mule:substitutableName" use="optional" name="config-ref">
          <xs:annotation>
            <xs:documentation>Specify which configuration to use for this invocation.</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionObject" use="required" name="value">
          <xs:annotation>
            <xs:documentation>the value to validate</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionInt" use="optional" name="min">
          <xs:annotation>
            <xs:documentation>the minimum expected length (inclusive, defaults to zero)</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionInt" use="optional" name="max">
          <xs:annotation>
            <xs:documentation>the maximum expected length (inclusive). Leave unspecified or {@code null} to allow any max length</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="exceptionClass">
          <xs:annotation>
            <xs:documentation>then the platform will choose a default type</xs:documentation>
          </xs:annotation>
        </xs:attribute>
        <xs:attribute type="mule:expressionString" use="optional" name="message">
          <xs:annotation>
            <xs:documentation>is an expression and evaluate it in case that the validation failed</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:simpleType name="org.mule.extension.validation.internal.validator.NumberTypeEnumType">
    <xs:union>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="INTEGER"></xs:enumeration>
          <xs:enumeration value="LONG"></xs:enumeration>
          <xs:enumeration value="SHORT"></xs:enumeration>
          <xs:enumeration value="DOUBLE"></xs:enumeration>
          <xs:enumeration value="FLOAT"></xs:enumeration>
        </xs:restriction>
      </xs:simpleType>
      <xs:simpleType>
        <xs:restriction xmlns:mule="http://www.mulesoft.org/schema/mule/core" base="mule:propertyPlaceholderType"></xs:restriction>
      </xs:simpleType>
    </xs:union>
  </xs:simpleType>
</xs:schema>